//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.8.2
//     from Assets/Settings/Game Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
using UnityEngine;

public partial class @GameControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Game Controls"",
    ""maps"": [
        {
            ""name"": ""Stacking Gameplay"",
            ""id"": ""a3a4e40c-6cb0-4973-99d5-f7b86e768986"",
            ""actions"": [
                {
                    ""name"": ""Tap Select"",
                    ""type"": ""Button"",
                    ""id"": ""31e180e1-6b2f-4ae7-950c-9f56e9bc9e71"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Hold Select"",
                    ""type"": ""Button"",
                    ""id"": ""b5435d47-4d12-466c-8b49-2becaebedd07"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse Position"",
                    ""type"": ""Value"",
                    ""id"": ""c23a31d2-a960-4ac5-9039-8d171947aa41"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""07fb877e-f935-40ea-a99f-85daeaf4d5d5"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6f69dbd0-d9aa-4f0f-b4c9-c7dae13b0777"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": "";Player Controls"",
                    ""action"": ""Tap Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0ddf225e-88e0-4865-80ed-b9403d73a726"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": "";Player Controls"",
                    ""action"": ""Hold Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""337d485d-1c2b-4db1-a71c-4e8daa6b08f5"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Position"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""791c66c0-a558-4f9e-9a59-756de866cc0c"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Player Controls"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Player Controls"",
            ""bindingGroup"": ""Player Controls"",
            ""devices"": [
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Stacking Gameplay
        m_StackingGameplay = asset.FindActionMap("Stacking Gameplay", throwIfNotFound: true);
        m_StackingGameplay_TapSelect = m_StackingGameplay.FindAction("Tap Select", throwIfNotFound: true);
        m_StackingGameplay_HoldSelect = m_StackingGameplay.FindAction("Hold Select", throwIfNotFound: true);
        m_StackingGameplay_MousePosition = m_StackingGameplay.FindAction("Mouse Position", throwIfNotFound: true);
        m_StackingGameplay_Pause = m_StackingGameplay.FindAction("Pause", throwIfNotFound: true);
    }

    ~@GameControls()
    {
        Debug.Assert(!m_StackingGameplay.enabled, "This will cause a leak and performance issues, GameControls.StackingGameplay.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Stacking Gameplay
    private readonly InputActionMap m_StackingGameplay;
    private List<IStackingGameplayActions> m_StackingGameplayActionsCallbackInterfaces = new List<IStackingGameplayActions>();
    private readonly InputAction m_StackingGameplay_TapSelect;
    private readonly InputAction m_StackingGameplay_HoldSelect;
    private readonly InputAction m_StackingGameplay_MousePosition;
    private readonly InputAction m_StackingGameplay_Pause;
    public struct StackingGameplayActions
    {
        private @GameControls m_Wrapper;
        public StackingGameplayActions(@GameControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @TapSelect => m_Wrapper.m_StackingGameplay_TapSelect;
        public InputAction @HoldSelect => m_Wrapper.m_StackingGameplay_HoldSelect;
        public InputAction @MousePosition => m_Wrapper.m_StackingGameplay_MousePosition;
        public InputAction @Pause => m_Wrapper.m_StackingGameplay_Pause;
        public InputActionMap Get() { return m_Wrapper.m_StackingGameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(StackingGameplayActions set) { return set.Get(); }
        public void AddCallbacks(IStackingGameplayActions instance)
        {
            if (instance == null || m_Wrapper.m_StackingGameplayActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_StackingGameplayActionsCallbackInterfaces.Add(instance);
            @TapSelect.started += instance.OnTapSelect;
            @TapSelect.performed += instance.OnTapSelect;
            @TapSelect.canceled += instance.OnTapSelect;
            @HoldSelect.started += instance.OnHoldSelect;
            @HoldSelect.performed += instance.OnHoldSelect;
            @HoldSelect.canceled += instance.OnHoldSelect;
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IStackingGameplayActions instance)
        {
            @TapSelect.started -= instance.OnTapSelect;
            @TapSelect.performed -= instance.OnTapSelect;
            @TapSelect.canceled -= instance.OnTapSelect;
            @HoldSelect.started -= instance.OnHoldSelect;
            @HoldSelect.performed -= instance.OnHoldSelect;
            @HoldSelect.canceled -= instance.OnHoldSelect;
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IStackingGameplayActions instance)
        {
            if (m_Wrapper.m_StackingGameplayActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IStackingGameplayActions instance)
        {
            foreach (var item in m_Wrapper.m_StackingGameplayActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_StackingGameplayActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public StackingGameplayActions @StackingGameplay => new StackingGameplayActions(this);
    private int m_PlayerControlsSchemeIndex = -1;
    public InputControlScheme PlayerControlsScheme
    {
        get
        {
            if (m_PlayerControlsSchemeIndex == -1) m_PlayerControlsSchemeIndex = asset.FindControlSchemeIndex("Player Controls");
            return asset.controlSchemes[m_PlayerControlsSchemeIndex];
        }
    }
    public interface IStackingGameplayActions
    {
        void OnTapSelect(InputAction.CallbackContext context);
        void OnHoldSelect(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
